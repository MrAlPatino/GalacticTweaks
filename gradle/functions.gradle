def getModVersion() {
	try {
		return getVersion()
	} catch (Exception ex) {
		System.out.println("Could not get the Mod version!")
	}
}

static def makeVersionMap(sem, bn) {
	def out = [:]
	out['build.number'] = bn.toString()
	out['version_short'] = "${sem}".toString()
	out['version'] = "${sem}.${bn}".toString()
	return out
}

def getVersion() {
	String sem = project.mod_version.toString()
	String bn = getBuildNumber()

	return makeVersionMap(sem, bn)
}

// Build number tracking

String getBuildNumber() {
	def versionFile = file('buildnum.properties')
	if (versionFile.canRead()) {
		Properties versionProps = new Properties()
		versionProps.load(new FileInputStream(versionFile))
		return versionProps['build_num'].toString()
	}
	return "1"
}

task incrementBuild {
	doFirst {
		def versionFile = file('buildnum.properties')
		if (versionFile.canRead()) {
			Properties versionProps = new Properties()
			versionProps.load(new FileInputStream(versionFile))
			def num = versionProps['build_num'].toInteger() + 1
			println("incrementing BuildNumber to: " + num)
			versionProps['build_num'] = num.toString()
			versionProps.store(versionFile.newWriter(), null)
		} else {
			println("version.properties file not found! Ignoring.")
		}
	}
}

ext {
	getModFile = this.&getModFile
	getModVersion = this.&getModVersion
	getGitVersion = this.&getGitVersion
	getVersion = this.&getVersion
	getBuildNumber = this.&getBuildNumber
}

if(incrementBuild) {
	build.finalizedBy incrementBuild // only increment on successful builds
}