def getModVersion() {
	try {
		return getGitVersion()
	} catch (Exception ex) {
		System.out.println("Git version failed, falling back to old method")
		return getVersion('VERSION', getModFile())
	}
}

def getGitVersion() {
	// Call git command
	def outStream = new ByteArrayOutputStream()
	def result = exec {
		executable = 'git'
		args = [ 'describe', '--long' ]
		standardOutput = outStream
	}

	def fullVersion = outStream.toString().trim()
	def matcher = fullVersion =~ /(\d+).(\d+).(\d+)-(.*)/

	def maj = matcher[0][1]
	def min = matcher[0][2]
	def rev = matcher[0][3]
	def bn = getBuildNumber()

	return makeVersionMap(maj, min, rev, bn, matcher[0][4])
}

static def makeVersionMap(maj, min, rev, bn, githash) {
	def out = [:]
	out['build.major.number'] = maj.toString()
	out['build.minor.number'] = min.toString()
	out['build.revision.number'] = rev.toString()
	out['build.githash'] = githash
	out['build.number'] = bn.toString()
	out['version_short'] = "${maj}.${min}.${rev}".toString()
	out['version'] = "${maj}.${min}.${rev}+${bn}".toString()
	return out
}

// Modified old version getter
def getVersion(String type, String mod_file) {
	String maj = '0'
	String min = '0'
	String rev = '0'
	String bn = getBuildNumber()

	File file = file(mod_file)
	def prefix = ~/^(?:public|protected|private) static final String $type = ".*$/
	file.eachLine { String s ->
		s = s.trim()
		if (s ==~ prefix || prefix.matcher(s).matches()) {
			String[] bits = s.split("=")
			String interesting = bits[1].trim()
			interesting = interesting.substring(1, interesting.length() - 2)
			String[] pts = interesting.trim().split("\\.")

			maj = pts[0] ?: '0'
			min = pts[1] ?: '0'
			rev = pts[2] ?: '0'
		}
	}

	return makeVersionMap(maj, min, rev, bn, 'unknown')
}

// Used by old getVersion
String getModFile() {
	String path = ''
	FileTree tree = fileTree(dir: 'src/main/java')
	tree.include '**/*.java'
	tree.visit { element ->
		if (element.file.isFile()) {
			element.file.eachLine { String s ->
				s = s.trim()
				if (s.startsWith('@Mod(')) {
					path = "src/main/java/$element.relativePath"
				}
			}
		}
	}
	return path
}

// Build number tracking

String getBuildNumber() {
	def versionFile = file('buildnum.properties')
	if (versionFile.canRead()) {
		Properties versionProps = new Properties()
		versionProps.load(new FileInputStream(versionFile))
		return versionProps['build_num'].toString()
	}
	return "1"
}

task incrementBuild {
	doFirst {
		def versionFile = file('buildnum.properties')
		if (versionFile.canRead()) {
			Properties versionProps = new Properties()
			versionProps.load(new FileInputStream(versionFile))
			def num = versionProps['build_num'].toInteger() + 1
			println("incrementing BuildNumber to: " + num)
			versionProps['build_num'] = num.toString()
			versionProps.store(versionFile.newWriter(), null)
		} else {
			println("version.properties file not found! Ignoring.")
		}
	}
}

ext {
	getModFile = this.&getModFile
	getModVersion = this.&getModVersion
	getGitVersion = this.&getGitVersion
	getVersion = this.&getVersion
	getBuildNumber = this.&getBuildNumber
}

build.finalizedBy incrementBuild // only increment on successful builds
