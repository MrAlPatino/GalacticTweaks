buildscript {
	repositories {
		maven {
			name = "forge"
			url = "https://files.minecraftforge.net/maven"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
	}
}

plugins {
	id 'java'
	id 'eclipse'
}

apply plugin: 'net.minecraftforge.gradle.forge'

apply from: 'gradle/functions.gradle'
apply from: 'gradle/artifact.gradle'
apply from: 'gradle/git2md_changelog.gradle'
apply from: 'gradle/private.gradle'

loadSecrets()
// ==========================================

def versionBuild = 0
if (System.getenv("BUILD_NUMBER") != null)
	versionBuild = System.getenv("BUILD_NUMBER")

def incrementBuild = false
def devBuild = false
def ver
def short_version = "${mod_version}"
if(devBuild) {
	ver = "${mod_version}." + getBuildNumber() + "-dev." + versionBuild
} else {
	ver = "${mod_version}." + getBuildNumber()
}
version = ver
System.out.println(ver)

group = "${group}"
archivesBaseName = "${name}"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
	sourceCompatibility = targetCompatibility = '1.8'
}

configurations {
    extraLibs
    implementation.extendsFrom(extraLibs)
}

String GCBuild = "261"
String GCVersion = "1.12.2-4.0.2.${GCBuild}"

repositories {
	ivy {
		url "https://micdoodle8.com/new-builds/"
		layout 'pattern', {
			artifact "[organization]/${GCBuild}/[module]-[revision].jar"
		}
		metadataSources {
			artifact()
		}
	}
	mavenLocal()
	mavenCentral()
    removeIf { it.url.host == 'files.minecraftforge.net' }
    maven { url "https://maven.minecraftforge.net/" }
	maven { url "https://www.cursemaven.com" }
	maven { url "https://jitpack.io" }
	maven { url "https://maven.mjrlegends.com/" }
	maven { url "https://minecraft.curseforge.com/api/maven/" }
	maven { url "http://dvs1.progwml6.com/files/maven" }
	maven { url "http://maven.ic2.player.to" }
	maven { url 'https://squiddev.cc/maven/' }
}

dependencies {
	compile "GC-1.12-dev:GalacticraftCore-Dev:${GCVersion}"
	compile "GC-1.12-dev:Galacticraft-API:${GCVersion}"
	compile "GC-1.12-dev:Galacticraft-Planets-Dev:${GCVersion}"
	compile "GC-1.12-dev:MicdoodleCore-Dev:${GCVersion}"

    compileOnly 'org.projectlombok:lombok:1.18.18'
    annotationProcessor 'org.projectlombok:lombok:1.18.18'
    
    testCompileOnly 'org.projectlombok:lombok:1.18.18'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.18'

	compile("com.mjr.planetprogression:PlanetProgression:1.12.2-0.4.5:api") {
		exclude module: 'jei_1.12.2'
		exclude module: 'industrialcraft-2'
	}
	compile("com.mjr.extraplanets:ExtraPlanets:1.12.2-0.7.2:dev") {
		exclude module: 'jei_1.12.2'
	}
	compile "mezz.jei:jei_${mc_version}:4.16.1.302:api"
	runtime "mezz.jei:jei_${mc_version}:4.16.1.302"
	
	runtime "com.mjr.mjrlegendslib:MJRLegendsLib:1.12.2-1.2.0"
	compile "industrial-craft:industrialcraft-2-2.8.99:ex112:api"
	
	compile "curse.maven:asmodeuscore-0.0.25-303101:3231302"
	compile "curse.maven:galaxyspace-2.0.16-238770:3235468"
	compile "curse.maven:zollerngalaxy-2.0.23-241940:3187752"
	compile "curse.maven:moreplanets-2.2.1_280-261990:3165054"
	runtime "curse.maven:stevekunglib-1.1.9-296019:3051420"
}

minecraft {
	version = "${mc_version}-${forge_version}"
	runDir = "run"
//	coreMod = 'net.romvoid95.plugin.GalacticTweaksPlugin'
	mappings = "${mcp}"
	
//	def args = [
//		"-Dfml.coreMods.load=net.romvoid95.plugin.GalacticTweaksPlugin"
//	]
//	clientJvmArgs.addAll(args)
//	serverJvmArgs.addAll(args)

	replace '@VERSION@', project.version
	replace '@MCVERSION@', project.minecraft.version
	replace '@FINGERPRINT@', project.findProperty('signSHA1')
	replaceIn "Info.java"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    rename '(.+_at.cfg)', '$1'
}

jar {
    from(configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "LICENSE.txt", "META-INF/*", "META-INF/versions/9/module-info.*"
    }
	manifest {
		mainAttributes(
				'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}",
				'Timestamp': System.currentTimeMillis(),
				'Implementation-Title': project.archivesBaseName,
				'Implementation-Version': version,
				'Built-On-Java': "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
				'Built-On': "${project.mc_version}-${project.forge_version}"
		)
		attributes( 
//				"FMLCorePluginContainsFMLMod": "true",
//				"FMLCorePlugin": "net.romvoid95.plugin.GalacticTweaksPlugin",
//				"ForceLoadAsMod": "true",
				"FMLAT": "galactictweaks_at.cfg"
		)
	}
}

task signJar(type: SignJar, dependsOn: reobfJar) {
	onlyIf {
		project.hasProperty('keyStore')
	}

	inputFile = jar.archivePath
	outputFile = jar.archivePath

	keyStore = findProperty('keyStore')
	alias = findProperty('keyStoreAlias')
	storePass = findProperty('keyStorePass')
	keyPass = findProperty('keyStoreKeyPass')
}

if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}

build.dependsOn signJar