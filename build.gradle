buildscript {
    repositories {
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }        
//		maven {
//            name = 'sponge'
//            url = 'https://repo.spongepowered.org/maven'
//        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
		//classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'net.ltgt.apt' version '0.10' // for lombok
	id 'maven-publish'
	id 'eclipse'
    id 'maven'
}

apply plugin: 'net.minecraftforge.gradle.forge'
//apply plugin: 'org.spongepowered.mixin'

apply from: "https://raw.githubusercontent.com/ReadOnly-Mods/Misc/master/Gradle/secretfile.gradle"

if (project.hasProperty('secretFile')) {
	
	loadSecrets(new File((String) findProperty('secretFile')))
}

version = "${versionMajor}.${versionMinor}.${versionRev}"
group = "${group}"
archivesBaseName = "${name}"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

project.ext {
    GCBuild = "261"
    GCVersion = "1.12.2-4.0.2.${GCBuild}"
}
apply from: "https://raw.githubusercontent.com/ReadOnly-Mods/Misc/master/Gradle/gcdevfiles.gradle"

repositories {
	jcenter()
	maven {
		name 'MJRLegends'
		url = "https://maven.mjrlegends.com/"
	}
	maven {
		name = 'curseforge'
		url = 'https://minecraft.curseforge.com/api/maven/'
	}    
    maven {
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
	maven {
		name 'IC2'
		url = "http://maven.ic2.player.to"
	}
	maven {
		url = "https://www.cursemaven.com"
	}
//	maven {
//		url "http://repo.spongepowered.org/maven/"
//	}
}

dependencies {
	
	compile "org.projectlombok:lombok:1.18.12"
	apt "org.projectlombok:lombok:1.18.12"

	compile "industrial-craft:industrialcraft-2-2.8.99:ex112:api"
	
	// LOAD GC ADDONS
	compile "com.mjr.planetprogression:PlanetProgression:1.12.2-0.4.5:api"
	compile "curse.maven:AsmodeusCore-Dev:3039768"
	compile "curse.maven:GSMod-0.0.14:3015062"
	compile "curse.maven:ExtraPlanets-1.7.0:3031689"
	runtime "curse.maven:MJRLib-1.2.0:3029769"
	compile "industrial-craft:industrialcraft-2-2.8.99:ex112:api"
	runtime "mezz.jei:jei_1.12.2:4.15.0.297"
	
	//provided("org.spongepowered:mixin:0.7.11-SNAPSHOT") { transitive = false }
	
}

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"
    replace '${version}', project.version
    mappings = "${mcp}"
	makeObfSourceJar false
	
    if (project.hasProperty('signSHA1') && getBooleanProperty('do_sign_jar')) {
        replace '@FINGERPRINT@', secret.signSHA1
    } else {
        replace '@FINGERPRINT@', ''
    }
	
//	clientRunArgs += "--mixin mixins.galactictweaks.json"
//	serverRunArgs += "--mixin mixins.galactictweaks.json"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

//sourceSets {
//    main {
//        ext.refMap = "mixins.galactictweaks.refmap.json"
//    }
//}

jar {

    manifest {
        mainAttributes(
                'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}",
                'Timestamp': System.currentTimeMillis(),
                'Implementation-Title': project.archivesBaseName,
                'Implementation-Version': version,
                'Built-On-Java': "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On': "${project.mc_version}-${project.forge_version}"
        )
    }
}

task deobfJar(type: Jar) {
    classifier = 'dev'
    from sourceSets.main.output
    manifest {
        mainAttributes(
                'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}:deobf",
                'Timestamp': System.currentTimeMillis(),
                'Implementation-Title': project.name + '-deobf',
                'Implementation-Version': project.version,
                'Built-On-Java': "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On': "${project.mc_version}-${project.forge_version}"
        )
    }
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf {
        project.hasProperty('keyStore')
    }

    inputFile = jar.archivePath
    outputFile = jar.archivePath

    keyStore = findProperty('keyStore')
    alias = findProperty('keyStoreAlias')
    storePass = findProperty('keyStorePass')
    keyPass = findProperty('keyStoreKeyPass')
}

build.dependsOn signJar
tasks.publish.dependsOn build
tasks.curseforge.dependsOn publish

curseforge {
    if (project.hasProperty('cf_project_id')) {
        apiKey = findProperty('curseforgeAPIKey') ?: 0
        project {
            id = project.cf_project_id
            if (project.hasProperty('cf_changelog_filename')) {
                changelog = file(project.cf_changelog_filename)
            } else {
                changelog = getGitChangelog
            }
            if (project.hasProperty('cf_changelog_type')) {
                changelogType = project.cf_changelog_type
            }
            if ((project.hasProperty('cf_release_type')) && ((project.cf_release_type == 'alpha') || (project.cf_release_type == 'beta') || (project.cf_release_type == 'release'))) {
                releaseType = project.cf_release_type
            } else {
                releaseType = 'alpha'
            }
            if (project.hasProperty('cf_versions')) {
                final def versions = "${project.cf_versions}".split(', ')
                versions.each {
                    addGameVersion "${it}"
                }
            }
            mainArtifact(jar) {
                if (getBooleanProperty('cf_use_custom_display_name')) {
                    displayName = "${project.name} ${project.display_version}"
                }
                if (project.hasProperty('cf_requirements') || project.hasProperty('cf_optionals') || project.hasProperty('cf_embeddeds') || project.hasProperty('cf_tools') || project.hasProperty('cf_incompatibles') || project.hasProperty('cf_includes')) {
                    relations {
                        if (project.hasProperty('cf_requirements')) {
                            final def requirements = "${project.cf_requirements}".split(', ')
                            requirements.each {
                                requiredDependency "${it}"
                            }
                        }
                        if (project.hasProperty('cf_optionals')) {
                            final def optionals = "${project.cf_optionals}".split(', ')
                            optionals.each {
                                optionalDependency "${it}"
                            }
                        }
                        if (project.hasProperty('cf_embeddeds')) {
                            final def embeddeds = "${project.cf_embeddeds}".split(', ')
                            embeddeds.each {
                                embeddedLibrary "${it}"
                            }
                        }
                        if (project.hasProperty('cf_tools')) {
                            final def tools = "${project.cf_tools}".split(', ')
                            tools.each {
                                tool "${it}"
                            }
                        }
                        if (project.hasProperty('cf_incompatibles')) {
                            final def incompatibles = "${project.cf_incompatibles}".split(', ')
                            incompatibles.each {
                                incompatible "${it}"
                            }
                        }
                        if (project.hasProperty('cf_includes')) {
                            final def includes = "${project.cf_includes}".split(', ')
                            includes.each {
                                include "${it}"
                            }
                        }
                    }
                }
            }
            if (getBooleanProperty('create_api_jar')) {
                addArtifact(apiJar) {
                    if (getBooleanProperty('cf_use_custom_display_name')) {
                        displayName = "${project.name} ${project.display_version} API"
                    }
                }
            }
            if (getBooleanProperty('create_source_jar')) {
                addArtifact(sourceJar) {
                    if (getBooleanProperty('cf_use_custom_display_name')) {
                        displayName = "${project.name} ${project.display_version} Sources"
                    }
                }
            }
            if (getBooleanProperty('create_deobf_jar')) {
                addArtifact(deobfJar) {
                    if (getBooleanProperty('cf_use_custom_display_name')) {
                        displayName = "${project.name} ${project.display_version} Development"
                    }
                }
            }
            if (getBooleanProperty('create_javadoc_jar')) {
                addArtifact(javadocJar) {
                    if (getBooleanProperty('cf_use_custom_display_name')) {
                        displayName = "${project.name} ${project.display_version} Javadoc"
                    }
                }
            }
        }
    }
}

boolean getBooleanProperty(final String property) {
    if (project.hasProperty(property)) {
        return ((String) project.findProperty(property)).toBoolean()
    } else {
        return false
    }
}